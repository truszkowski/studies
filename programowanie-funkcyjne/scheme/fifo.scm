(define (fifo in out size)
  (define (balanse in out)
    (cond ((null? in) (cons in out))
          ((null? out) (cons null (reverse in)))
          (else (cons in out))))
  (let ((inout (balanse in out)))
    (let ((in1 (car inout))
          (out1 (cdr inout)))
      (let ((first (if (null? out1) null (car out1))))
        (list in1 out1 size first)))))
(define empty (fifo null null 0))
(define inqueque car)
(define outqueque cadr)
(define size caddr)
(define cache cadddr)
(define (empty? q) (= (size q) 0))
(define (first q)
  (if (> (size q) 0) (cache q) (error "empty queque")))
(define (put q x)
  (fifo (cons x (inqueque q)) (outqueque q) (+ (size q) 1)))
(define (remove q)
  (if (empty? q) (error "empty queque")
      (fifo (inqueque q) (cdr (outqueque q)) (- (size q) 1))))
