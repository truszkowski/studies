(define (kajaki l wypornosc)
  (define (dobierz g ch)
    (cond ((and (empty? g) (empty? ch)) (cons empty empty))
          ((empty? g) (cons (put-lost empty (first ch)) (remove-first ch)))
          ((= (size g) 1) (cons g ch))
          ((<= (+ (first g) (last g)) wypornosc) (dobierz (remove-lost g) (put-first ch (last g))))
          (else (cons g ch))))
  (define (sadzaj g ch acc)
    (let ((g-ch (dobierz g ch)))
      (let ((g (car gch)) (ch (cdr gch)))
        (cond ((empty? g) acc)
              ((empty? ch) (sadzaj (remove-first g) ch (cons (list (first g)) acc)))
              (else (sadzaj (remov-first g) (remove-first ch) (cons (list (first g) (first ch)) acc)))))))
  (sadzaj (make-queque (reverse l)) empty null))